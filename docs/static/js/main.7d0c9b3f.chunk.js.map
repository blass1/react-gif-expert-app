{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAMaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAmBA,OACI,mCACA,sBAAMC,SAbW,SAACC,GAElBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAE5BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAMlB,SAEI,uBACAO,KAAK,OAELC,MAAOT,EAEPU,SAzBkB,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,e,+BCXlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAGbC,EAHa,gDAGmCC,UAAUH,GAH7C,+DAIKI,MAAOF,GAJZ,cAIbG,EAJa,gBAMIA,EAAUC,OANd,uBAMXC,EANW,EAMXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAZtB,kBAkBZM,GAlBY,4CAAH,sDCAPO,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAElC,OACI,sBAAKc,UAAU,8CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAMN,IACrB,4BAAKA,QCFJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAOtB,ECLwB,SAAEA,GAG1B,MAA0Bd,mBAAS,CAE/BqB,KAAM,GACNa,SAAS,IAHb,mBAAOC,EAAP,KAAcC,EAAd,KAiCA,OA1BAC,qBAAW,WAEPxB,EAAQC,GACHwB,MAAM,SAAAC,GAEHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAKtB,CAACpB,IAcGqB,ED/B0BK,CAAc1B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAErB,OACI,qCACI,oBAAIJ,UAAU,mBAAd,SAAmChB,IAKjCoB,GAAW,oBAAIJ,UAAU,iBAAd,2BAEb,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAGSA,GAFCA,EAAIC,aExBzBgB,EAAe,WAExB,IACA,EAAoCzC,mBADd,CAAC,cACvB,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAaA,OACI,qCACI,mDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEJ,+BAQQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAUA,GADLA,MAMjB,8B,MClCZ6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7d0c9b3f.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n// Este componete se encarga de agregar al elemento que se escriba en el input\r\n\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    // Manejador del cambio del input\r\n    const handleInputChange = (e) => {\r\n        //console.log(e.target.value)\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        // Para evitar que el submit recargue toda la pagina como se hacia antiguamente\r\n        e.preventDefault();\r\n        \r\n        if ( inputValue.trim().length > 2 ) {\r\n            // Tengo cats que es un callback con el estado anterior\r\n            setCategories( cats => [inputValue, ...cats, ]);\r\n            setInputValue('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <form onSubmit={ handleSubmit }>\r\n            \r\n            <input\r\n            type=\"text\"\r\n            // Valor inicial\r\n            value={inputValue}\r\n            // Cuando eso cambia se actualiza\r\n            onChange={ handleInputChange }\r\n            />\r\n\r\n        </form>\r\n \r\n        </>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}\r\n\r\n","// Promesa async que devuelve gifs\r\n\r\nexport const getGifs = async(category) => {\r\n\r\n    //utilizamos el encode para sacar los espacios y transformarlos en data de la url\r\n    const url = `http://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=ZPJ6nf1iq0ceG4wNI3fpISF8sBONuKhQ`;\r\n    const respuesta = await fetch( url );\r\n    // Desestructuro el arreglo\r\n    const { data } = await respuesta.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url,\r\n        }\r\n    })\r\n\r\n    //console.log(gifs);\r\n\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { title, url } ) => {\r\n   \r\n    return (\r\n        <div className=\"card animate__animated animate__backInRight\">\r\n            <img src={url} alt={ title }/>\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","//import React, { useState, useEffect } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport {GifGridItem} from './GifGridItem'\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    \r\n    // Imagenes, cuando se carga esta vacio\r\n    // const [images, setImages] = useState([])\r\n\r\n    // desestructuro el loading del custum hook (useFetchGif) y lo utilizo en el return del componente\r\n    // renombro data a images con el :\r\n    const { data:images, loading } = useFetchGifs( category );\r\n    \r\n    return (\r\n        <>\r\n            <h3 className=\"animate__rollOut\">{ category }</h3>\r\n\r\n            {/* Operador ternario IF - CONDICION - SIESTRUE - SIESFALSE */}\r\n            {/* { loading ? 'Cargando....' : 'Data cargada correctamente' } */}\r\n            {/* Evalua la primera condicion y si es true muestra el loading */}\r\n            { loading && <h2 className=\"animate__flash\">Loading......</h2>}\r\n\r\n            <div className=\"card-grid\">\r\n                \r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                            key={ img.id }\r\n                            //Spread del img \r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }\r\n\r\n        </div>\r\n        </>\r\n\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport {getGifs} from '../helpers/getGifs';\r\n/* \r\nEste custom hook funcionan como si fueran funtional components, pueden tener efectos, pueden usar reducer\r\n pueden utilizar contextos \r\n Este hook nos vba a servir para extraer una peque;a logico para realizar la carga automatica\r\n*/\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    // Cuando se inicializa El estado del componente es loading true por defecto y un array vacio\r\n    const [state, setState] = useState({\r\n\r\n        data: [],\r\n        loading: true,\r\n    });\r\n\r\n    // Con useEffect el codigo solo se va a renderizar CUANDO SE CARGA LA PRIMERA VEZ o cuando cambia la [category]\r\n    useEffect( () => {\r\n        // Promesa\r\n        getGifs(category)\r\n            .then( imgs => {\r\n\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n                \r\n            })\r\n    // Si cambia category se ejecuta de nuevo\r\n    }, [category])\r\n\r\n    // .then( imgs => {\r\n    //     // Intencionalemnte utilizamos setTimeout para probarlo\r\n    //     setTimeout( () => {\r\n    //             console.log(imgs)\r\n    //             setState({\r\n    //             data: imgs,\r\n    //             loading: false\r\n    //         });\r\n    //     }, 3000)\r\n        \r\n    // })\r\n\r\n    return state; // {data: [], loading: true }\r\n\r\n}\r\n","import React, { useState} from 'react'\r\nimport { AddCategory } from './AddCategory';\r\nimport { GifGrid } from './GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n    \r\n    const categoriesArr = ['One punch'];\r\n    const [categories, setCategories] = useState(categoriesArr)\r\n\r\n    // const handleAdd = () => {\r\n    //     //  Utilizo el setCategories para trabajar con los atributos de las categorias\r\n    //     // Metodo 1) \r\n    //     // Para agregar un nuevo elemento al arreglo tengo que usar el operador spred (...)\r\n    //     // Que basicamente llama al ultimo estado de la categoria y el segundo argumento agrego el elemento\r\n    //     //setCategories( [...categories, 'Nuevo elemento'] )\r\n    //     //setCategories( ['Nuevo elemento', ...categories] )\r\n    //     // Metodo 2 con un metodo\r\n    //     setCategories( cats => ['Nuevo elemento', ...categories] )\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp v1.0</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr/>            \r\n        \r\n        <ol>\r\n            {   \r\n                // metodo de los array \"map\" recorre como un for los elementos\r\n                // y devuelve 2 atributos (elObjeto, suIdInterno)\r\n                // categories.map( category => {\r\n                //     //Cada objeto tiene que tener su key, en este caso le asignamos la categoria\r\n                //     return <li key={category}>{ category }</li>\r\n                // })\r\n                categories.map( category => (\r\n                    <GifGrid \r\n                        key={category}\r\n                        category={category}\r\n                        \r\n                    />\r\n                ))\r\n            }\r\n            <hr/> \r\n        </ol>\r\n        \r\n\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './components/GifExpertApp'\n\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}